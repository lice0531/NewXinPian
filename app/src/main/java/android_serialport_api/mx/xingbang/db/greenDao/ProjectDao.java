package android_serialport_api.mx.xingbang.db.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android_serialport_api.mx.xingbang.db.Project;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Project".
*/
public class ProjectDao extends AbstractDao<Project, Long> {

    public static final String TABLENAME = "Project";

    /**
     * Properties of entity Project.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Project_name = new Property(1, String.class, "project_name", false, "project_name");
        public final static Property Xmbh = new Property(2, String.class, "xmbh", false, "xmbh");
        public final static Property Htbh = new Property(3, String.class, "htbh", false, "htbh");
        public final static Property Dwdm = new Property(4, String.class, "dwdm", false, "dwdm");
        public final static Property Bprysfz = new Property(5, String.class, "bprysfz", false, "bprysfz");
        public final static Property Coordxy = new Property(6, String.class, "coordxy", false, "coordxy");
    }


    public ProjectDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Project\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"project_name\" TEXT," + // 1: project_name
                "\"xmbh\" TEXT," + // 2: xmbh
                "\"htbh\" TEXT," + // 3: htbh
                "\"dwdm\" TEXT," + // 4: dwdm
                "\"bprysfz\" TEXT," + // 5: bprysfz
                "\"coordxy\" TEXT);"); // 6: coordxy
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Project\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Project entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String project_name = entity.getProject_name();
        if (project_name != null) {
            stmt.bindString(2, project_name);
        }
 
        String xmbh = entity.getXmbh();
        if (xmbh != null) {
            stmt.bindString(3, xmbh);
        }
 
        String htbh = entity.getHtbh();
        if (htbh != null) {
            stmt.bindString(4, htbh);
        }
 
        String dwdm = entity.getDwdm();
        if (dwdm != null) {
            stmt.bindString(5, dwdm);
        }
 
        String bprysfz = entity.getBprysfz();
        if (bprysfz != null) {
            stmt.bindString(6, bprysfz);
        }
 
        String coordxy = entity.getCoordxy();
        if (coordxy != null) {
            stmt.bindString(7, coordxy);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Project entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String project_name = entity.getProject_name();
        if (project_name != null) {
            stmt.bindString(2, project_name);
        }
 
        String xmbh = entity.getXmbh();
        if (xmbh != null) {
            stmt.bindString(3, xmbh);
        }
 
        String htbh = entity.getHtbh();
        if (htbh != null) {
            stmt.bindString(4, htbh);
        }
 
        String dwdm = entity.getDwdm();
        if (dwdm != null) {
            stmt.bindString(5, dwdm);
        }
 
        String bprysfz = entity.getBprysfz();
        if (bprysfz != null) {
            stmt.bindString(6, bprysfz);
        }
 
        String coordxy = entity.getCoordxy();
        if (coordxy != null) {
            stmt.bindString(7, coordxy);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Project readEntity(Cursor cursor, int offset) {
        Project entity = new Project( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // project_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // xmbh
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // htbh
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dwdm
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bprysfz
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // coordxy
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Project entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProject_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setXmbh(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHtbh(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDwdm(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBprysfz(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCoordxy(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Project entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Project entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Project entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
