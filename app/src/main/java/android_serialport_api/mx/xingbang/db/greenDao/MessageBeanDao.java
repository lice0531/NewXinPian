package android_serialport_api.mx.xingbang.db.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android_serialport_api.mx.xingbang.db.MessageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Message".
*/
public class MessageBeanDao extends AbstractDao<MessageBean, Long> {

    public static final String TABLENAME = "Message";

    /**
     * Properties of entity MessageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Pro_bprysfz = new Property(1, String.class, "pro_bprysfz", false, "pro_bprysfz");
        public final static Property Pro_htid = new Property(2, String.class, "pro_htid", false, "pro_htid");
        public final static Property Pro_xmbh = new Property(3, String.class, "pro_xmbh", false, "pro_xmbh");
        public final static Property Equ_no = new Property(4, String.class, "equ_no", false, "equ_no");
        public final static Property Pro_coordxy = new Property(5, String.class, "pro_coordxy", false, "pro_coordxy");
        public final static Property Server_addr = new Property(6, String.class, "server_addr", false, "server_addr");
        public final static Property Server_port = new Property(7, String.class, "server_port", false, "server_port");
        public final static Property Server_http = new Property(8, String.class, "server_http", false, "server_http");
        public final static Property Server_ip = new Property(9, String.class, "server_ip", false, "server_ip");
        public final static Property Qiaosi_set = new Property(10, String.class, "qiaosi_set", false, "qiaosi_set");
        public final static Property Preparation_time = new Property(11, String.class, "preparation_time", false, "preparation_time");
        public final static Property Chongdian_time = new Property(12, String.class, "chongdian_time", false, "chongdian_time");
        public final static Property Server_type1 = new Property(13, String.class, "server_type1", false, "server_type1");
        public final static Property Server_type2 = new Property(14, String.class, "server_type2", false, "server_type2");
        public final static Property Pro_dwdm = new Property(15, String.class, "pro_dwdm", false, "pro_dwdm");
        public final static Property Jiance_time = new Property(16, String.class, "jiance_time", false, "jiance_time");
        public final static Property Version = new Property(17, String.class, "version", false, "version");
    }


    public MessageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MessageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Message\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"pro_bprysfz\" TEXT," + // 1: pro_bprysfz
                "\"pro_htid\" TEXT," + // 2: pro_htid
                "\"pro_xmbh\" TEXT," + // 3: pro_xmbh
                "\"equ_no\" TEXT," + // 4: equ_no
                "\"pro_coordxy\" TEXT," + // 5: pro_coordxy
                "\"server_addr\" TEXT," + // 6: server_addr
                "\"server_port\" TEXT," + // 7: server_port
                "\"server_http\" TEXT," + // 8: server_http
                "\"server_ip\" TEXT," + // 9: server_ip
                "\"qiaosi_set\" TEXT," + // 10: qiaosi_set
                "\"preparation_time\" TEXT," + // 11: preparation_time
                "\"chongdian_time\" TEXT," + // 12: chongdian_time
                "\"server_type1\" TEXT," + // 13: server_type1
                "\"server_type2\" TEXT," + // 14: server_type2
                "\"pro_dwdm\" TEXT," + // 15: pro_dwdm
                "\"jiance_time\" TEXT," + // 16: jiance_time
                "\"version\" TEXT);"); // 17: version
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Message\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pro_bprysfz = entity.getPro_bprysfz();
        if (pro_bprysfz != null) {
            stmt.bindString(2, pro_bprysfz);
        }
 
        String pro_htid = entity.getPro_htid();
        if (pro_htid != null) {
            stmt.bindString(3, pro_htid);
        }
 
        String pro_xmbh = entity.getPro_xmbh();
        if (pro_xmbh != null) {
            stmt.bindString(4, pro_xmbh);
        }
 
        String equ_no = entity.getEqu_no();
        if (equ_no != null) {
            stmt.bindString(5, equ_no);
        }
 
        String pro_coordxy = entity.getPro_coordxy();
        if (pro_coordxy != null) {
            stmt.bindString(6, pro_coordxy);
        }
 
        String server_addr = entity.getServer_addr();
        if (server_addr != null) {
            stmt.bindString(7, server_addr);
        }
 
        String server_port = entity.getServer_port();
        if (server_port != null) {
            stmt.bindString(8, server_port);
        }
 
        String server_http = entity.getServer_http();
        if (server_http != null) {
            stmt.bindString(9, server_http);
        }
 
        String server_ip = entity.getServer_ip();
        if (server_ip != null) {
            stmt.bindString(10, server_ip);
        }
 
        String qiaosi_set = entity.getQiaosi_set();
        if (qiaosi_set != null) {
            stmt.bindString(11, qiaosi_set);
        }
 
        String preparation_time = entity.getPreparation_time();
        if (preparation_time != null) {
            stmt.bindString(12, preparation_time);
        }
 
        String chongdian_time = entity.getChongdian_time();
        if (chongdian_time != null) {
            stmt.bindString(13, chongdian_time);
        }
 
        String server_type1 = entity.getServer_type1();
        if (server_type1 != null) {
            stmt.bindString(14, server_type1);
        }
 
        String server_type2 = entity.getServer_type2();
        if (server_type2 != null) {
            stmt.bindString(15, server_type2);
        }
 
        String pro_dwdm = entity.getPro_dwdm();
        if (pro_dwdm != null) {
            stmt.bindString(16, pro_dwdm);
        }
 
        String jiance_time = entity.getJiance_time();
        if (jiance_time != null) {
            stmt.bindString(17, jiance_time);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(18, version);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pro_bprysfz = entity.getPro_bprysfz();
        if (pro_bprysfz != null) {
            stmt.bindString(2, pro_bprysfz);
        }
 
        String pro_htid = entity.getPro_htid();
        if (pro_htid != null) {
            stmt.bindString(3, pro_htid);
        }
 
        String pro_xmbh = entity.getPro_xmbh();
        if (pro_xmbh != null) {
            stmt.bindString(4, pro_xmbh);
        }
 
        String equ_no = entity.getEqu_no();
        if (equ_no != null) {
            stmt.bindString(5, equ_no);
        }
 
        String pro_coordxy = entity.getPro_coordxy();
        if (pro_coordxy != null) {
            stmt.bindString(6, pro_coordxy);
        }
 
        String server_addr = entity.getServer_addr();
        if (server_addr != null) {
            stmt.bindString(7, server_addr);
        }
 
        String server_port = entity.getServer_port();
        if (server_port != null) {
            stmt.bindString(8, server_port);
        }
 
        String server_http = entity.getServer_http();
        if (server_http != null) {
            stmt.bindString(9, server_http);
        }
 
        String server_ip = entity.getServer_ip();
        if (server_ip != null) {
            stmt.bindString(10, server_ip);
        }
 
        String qiaosi_set = entity.getQiaosi_set();
        if (qiaosi_set != null) {
            stmt.bindString(11, qiaosi_set);
        }
 
        String preparation_time = entity.getPreparation_time();
        if (preparation_time != null) {
            stmt.bindString(12, preparation_time);
        }
 
        String chongdian_time = entity.getChongdian_time();
        if (chongdian_time != null) {
            stmt.bindString(13, chongdian_time);
        }
 
        String server_type1 = entity.getServer_type1();
        if (server_type1 != null) {
            stmt.bindString(14, server_type1);
        }
 
        String server_type2 = entity.getServer_type2();
        if (server_type2 != null) {
            stmt.bindString(15, server_type2);
        }
 
        String pro_dwdm = entity.getPro_dwdm();
        if (pro_dwdm != null) {
            stmt.bindString(16, pro_dwdm);
        }
 
        String jiance_time = entity.getJiance_time();
        if (jiance_time != null) {
            stmt.bindString(17, jiance_time);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(18, version);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageBean readEntity(Cursor cursor, int offset) {
        MessageBean entity = new MessageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pro_bprysfz
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pro_htid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pro_xmbh
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // equ_no
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pro_coordxy
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // server_addr
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // server_port
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // server_http
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // server_ip
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // qiaosi_set
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // preparation_time
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // chongdian_time
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // server_type1
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // server_type2
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // pro_dwdm
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // jiance_time
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // version
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPro_bprysfz(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPro_htid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPro_xmbh(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEqu_no(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPro_coordxy(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setServer_addr(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setServer_port(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setServer_http(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setServer_ip(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setQiaosi_set(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPreparation_time(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setChongdian_time(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setServer_type1(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setServer_type2(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPro_dwdm(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setJiance_time(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setVersion(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
