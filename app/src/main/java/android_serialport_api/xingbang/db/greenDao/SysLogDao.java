package android_serialport_api.xingbang.db.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android_serialport_api.xingbang.db.SysLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SysLog".
*/
public class SysLogDao extends AbstractDao<SysLog, Long> {

    public static final String TABLENAME = "SysLog";

    /**
     * Properties of entity SysLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Filename = new Property(1, String.class, "filename", false, "filename");
        public final static Property Path = new Property(2, String.class, "path", false, "path");
        public final static Property UpdataState = new Property(3, String.class, "updataState", false, "updataState");
        public final static Property UpdataTime = new Property(4, String.class, "updataTime", false, "updataTime");
    }


    public SysLogDao(DaoConfig config) {
        super(config);
    }
    
    public SysLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SysLog\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"filename\" TEXT," + // 1: filename
                "\"path\" TEXT," + // 2: path
                "\"updataState\" TEXT," + // 3: updataState
                "\"updataTime\" TEXT);"); // 4: updataTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SysLog\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SysLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(2, filename);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String updataState = entity.getUpdataState();
        if (updataState != null) {
            stmt.bindString(4, updataState);
        }
 
        String updataTime = entity.getUpdataTime();
        if (updataTime != null) {
            stmt.bindString(5, updataTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SysLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(2, filename);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String updataState = entity.getUpdataState();
        if (updataState != null) {
            stmt.bindString(4, updataState);
        }
 
        String updataTime = entity.getUpdataTime();
        if (updataTime != null) {
            stmt.bindString(5, updataTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SysLog readEntity(Cursor cursor, int offset) {
        SysLog entity = new SysLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // filename
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // updataState
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // updataTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SysLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFilename(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUpdataState(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdataTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SysLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SysLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SysLog entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
