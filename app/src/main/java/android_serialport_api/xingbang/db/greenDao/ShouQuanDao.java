package android_serialport_api.xingbang.db.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android_serialport_api.xingbang.db.ShouQuan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ShouQuan".
*/
public class ShouQuanDao extends AbstractDao<ShouQuan, Long> {

    public static final String TABLENAME = "ShouQuan";

    /**
     * Properties of entity ShouQuan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Xmbh = new Property(1, String.class, "xmbh", false, "xmbh");
        public final static Property Htbh = new Property(2, String.class, "htbh", false, "htbh");
        public final static Property Json = new Property(3, String.class, "json", false, "json");
        public final static Property ErrNum = new Property(4, String.class, "errNum", false, "errNum");
        public final static Property Qbzt = new Property(5, String.class, "qbzt", false, "qbzt");
        public final static Property Blastdate = new Property(6, String.class, "blastdate", false, "blastdate");
        public final static Property Dl_state = new Property(7, String.class, "dl_state", false, "dl_state");
        public final static Property Zb_state = new Property(8, String.class, "zb_state", false, "zb_state");
        public final static Property Dwdm = new Property(9, String.class, "dwdm", false, "dwdm");
        public final static Property Bprysfz = new Property(10, String.class, "bprysfz", false, "bprysfz");
        public final static Property Coordxy = new Property(11, String.class, "coordxy", false, "coordxy");
        public final static Property QblgNum = new Property(12, String.class, "qblgNum", false, "qblgNum");
        public final static Property Spare1 = new Property(13, String.class, "spare1", false, "spare1");
        public final static Property Spare2 = new Property(14, String.class, "spare2", false, "spare2");
    }


    public ShouQuanDao(DaoConfig config) {
        super(config);
    }
    
    public ShouQuanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ShouQuan\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"xmbh\" TEXT," + // 1: xmbh
                "\"htbh\" TEXT," + // 2: htbh
                "\"json\" TEXT," + // 3: json
                "\"errNum\" TEXT," + // 4: errNum
                "\"qbzt\" TEXT," + // 5: qbzt
                "\"blastdate\" TEXT," + // 6: blastdate
                "\"dl_state\" TEXT," + // 7: dl_state
                "\"zb_state\" TEXT," + // 8: zb_state
                "\"dwdm\" TEXT," + // 9: dwdm
                "\"bprysfz\" TEXT," + // 10: bprysfz
                "\"coordxy\" TEXT," + // 11: coordxy
                "\"qblgNum\" TEXT," + // 12: qblgNum
                "\"spare1\" TEXT," + // 13: spare1
                "\"spare2\" TEXT);"); // 14: spare2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ShouQuan\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShouQuan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String xmbh = entity.getXmbh();
        if (xmbh != null) {
            stmt.bindString(2, xmbh);
        }
 
        String htbh = entity.getHtbh();
        if (htbh != null) {
            stmt.bindString(3, htbh);
        }
 
        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(4, json);
        }
 
        String errNum = entity.getErrNum();
        if (errNum != null) {
            stmt.bindString(5, errNum);
        }
 
        String qbzt = entity.getQbzt();
        if (qbzt != null) {
            stmt.bindString(6, qbzt);
        }
 
        String blastdate = entity.getBlastdate();
        if (blastdate != null) {
            stmt.bindString(7, blastdate);
        }
 
        String dl_state = entity.getDl_state();
        if (dl_state != null) {
            stmt.bindString(8, dl_state);
        }
 
        String zb_state = entity.getZb_state();
        if (zb_state != null) {
            stmt.bindString(9, zb_state);
        }
 
        String dwdm = entity.getDwdm();
        if (dwdm != null) {
            stmt.bindString(10, dwdm);
        }
 
        String bprysfz = entity.getBprysfz();
        if (bprysfz != null) {
            stmt.bindString(11, bprysfz);
        }
 
        String coordxy = entity.getCoordxy();
        if (coordxy != null) {
            stmt.bindString(12, coordxy);
        }
 
        String qblgNum = entity.getQblgNum();
        if (qblgNum != null) {
            stmt.bindString(13, qblgNum);
        }
 
        String spare1 = entity.getSpare1();
        if (spare1 != null) {
            stmt.bindString(14, spare1);
        }
 
        String spare2 = entity.getSpare2();
        if (spare2 != null) {
            stmt.bindString(15, spare2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShouQuan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String xmbh = entity.getXmbh();
        if (xmbh != null) {
            stmt.bindString(2, xmbh);
        }
 
        String htbh = entity.getHtbh();
        if (htbh != null) {
            stmt.bindString(3, htbh);
        }
 
        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(4, json);
        }
 
        String errNum = entity.getErrNum();
        if (errNum != null) {
            stmt.bindString(5, errNum);
        }
 
        String qbzt = entity.getQbzt();
        if (qbzt != null) {
            stmt.bindString(6, qbzt);
        }
 
        String blastdate = entity.getBlastdate();
        if (blastdate != null) {
            stmt.bindString(7, blastdate);
        }
 
        String dl_state = entity.getDl_state();
        if (dl_state != null) {
            stmt.bindString(8, dl_state);
        }
 
        String zb_state = entity.getZb_state();
        if (zb_state != null) {
            stmt.bindString(9, zb_state);
        }
 
        String dwdm = entity.getDwdm();
        if (dwdm != null) {
            stmt.bindString(10, dwdm);
        }
 
        String bprysfz = entity.getBprysfz();
        if (bprysfz != null) {
            stmt.bindString(11, bprysfz);
        }
 
        String coordxy = entity.getCoordxy();
        if (coordxy != null) {
            stmt.bindString(12, coordxy);
        }
 
        String qblgNum = entity.getQblgNum();
        if (qblgNum != null) {
            stmt.bindString(13, qblgNum);
        }
 
        String spare1 = entity.getSpare1();
        if (spare1 != null) {
            stmt.bindString(14, spare1);
        }
 
        String spare2 = entity.getSpare2();
        if (spare2 != null) {
            stmt.bindString(15, spare2);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShouQuan readEntity(Cursor cursor, int offset) {
        ShouQuan entity = new ShouQuan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // xmbh
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // htbh
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // json
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // errNum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // qbzt
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // blastdate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dl_state
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // zb_state
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // dwdm
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // bprysfz
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // coordxy
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // qblgNum
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // spare1
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // spare2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShouQuan entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setXmbh(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHtbh(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setJson(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setErrNum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQbzt(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBlastdate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDl_state(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZb_state(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDwdm(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBprysfz(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCoordxy(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setQblgNum(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSpare1(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSpare2(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShouQuan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShouQuan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShouQuan entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
