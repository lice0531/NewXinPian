package android_serialport_api.xingbang.db.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android_serialport_api.xingbang.db.PaiData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PaiData".
*/
public class PaiDataDao extends AbstractDao<PaiData, Long> {

    public static final String TABLENAME = "PaiData";

    /**
     * Properties of entity PaiData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property PaiId = new Property(1, int.class, "paiId", false, "paiId");
        public final static Property Qyid = new Property(2, int.class, "qyid", false, "qyid");
        public final static Property Sum = new Property(3, String.class, "sum", false, "sum");
        public final static Property DelayMin = new Property(4, String.class, "delayMin", false, "delayMin");
        public final static Property DelayMax = new Property(5, String.class, "delayMax", false, "delayMax");
        public final static Property Shouquan = new Property(6, String.class, "shouquan", false, "shouquan");
        public final static Property StartDelay = new Property(7, String.class, "startDelay", false, "startDelay");
        public final static Property KongDelay = new Property(8, String.class, "kongDelay", false, "kongDelay");
        public final static Property NeiDelay = new Property(9, String.class, "neiDelay", false, "neiDelay");
        public final static Property PaiDelay = new Property(10, String.class, "paiDelay", false, "paiDelay");
        public final static Property KongNum = new Property(11, int.class, "kongNum", false, "kongNum");
        public final static Property DiJian = new Property(12, boolean.class, "diJian", false, "diJian");
    }


    public PaiDataDao(DaoConfig config) {
        super(config);
    }
    
    public PaiDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PaiData\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"paiId\" INTEGER NOT NULL ," + // 1: paiId
                "\"qyid\" INTEGER NOT NULL ," + // 2: qyid
                "\"sum\" TEXT," + // 3: sum
                "\"delayMin\" TEXT," + // 4: delayMin
                "\"delayMax\" TEXT," + // 5: delayMax
                "\"shouquan\" TEXT," + // 6: shouquan
                "\"startDelay\" TEXT," + // 7: startDelay
                "\"kongDelay\" TEXT," + // 8: kongDelay
                "\"neiDelay\" TEXT," + // 9: neiDelay
                "\"paiDelay\" TEXT," + // 10: paiDelay
                "\"kongNum\" INTEGER NOT NULL ," + // 11: kongNum
                "\"diJian\" INTEGER NOT NULL );"); // 12: diJian
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PaiData\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PaiData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPaiId());
        stmt.bindLong(3, entity.getQyid());
 
        String sum = entity.getSum();
        if (sum != null) {
            stmt.bindString(4, sum);
        }
 
        String delayMin = entity.getDelayMin();
        if (delayMin != null) {
            stmt.bindString(5, delayMin);
        }
 
        String delayMax = entity.getDelayMax();
        if (delayMax != null) {
            stmt.bindString(6, delayMax);
        }
 
        String shouquan = entity.getShouquan();
        if (shouquan != null) {
            stmt.bindString(7, shouquan);
        }
 
        String startDelay = entity.getStartDelay();
        if (startDelay != null) {
            stmt.bindString(8, startDelay);
        }
 
        String kongDelay = entity.getKongDelay();
        if (kongDelay != null) {
            stmt.bindString(9, kongDelay);
        }
 
        String neiDelay = entity.getNeiDelay();
        if (neiDelay != null) {
            stmt.bindString(10, neiDelay);
        }
 
        String paiDelay = entity.getPaiDelay();
        if (paiDelay != null) {
            stmt.bindString(11, paiDelay);
        }
        stmt.bindLong(12, entity.getKongNum());
        stmt.bindLong(13, entity.getDiJian() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PaiData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPaiId());
        stmt.bindLong(3, entity.getQyid());
 
        String sum = entity.getSum();
        if (sum != null) {
            stmt.bindString(4, sum);
        }
 
        String delayMin = entity.getDelayMin();
        if (delayMin != null) {
            stmt.bindString(5, delayMin);
        }
 
        String delayMax = entity.getDelayMax();
        if (delayMax != null) {
            stmt.bindString(6, delayMax);
        }
 
        String shouquan = entity.getShouquan();
        if (shouquan != null) {
            stmt.bindString(7, shouquan);
        }
 
        String startDelay = entity.getStartDelay();
        if (startDelay != null) {
            stmt.bindString(8, startDelay);
        }
 
        String kongDelay = entity.getKongDelay();
        if (kongDelay != null) {
            stmt.bindString(9, kongDelay);
        }
 
        String neiDelay = entity.getNeiDelay();
        if (neiDelay != null) {
            stmt.bindString(10, neiDelay);
        }
 
        String paiDelay = entity.getPaiDelay();
        if (paiDelay != null) {
            stmt.bindString(11, paiDelay);
        }
        stmt.bindLong(12, entity.getKongNum());
        stmt.bindLong(13, entity.getDiJian() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PaiData readEntity(Cursor cursor, int offset) {
        PaiData entity = new PaiData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // paiId
            cursor.getInt(offset + 2), // qyid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // delayMin
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // delayMax
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // shouquan
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // startDelay
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // kongDelay
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // neiDelay
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // paiDelay
            cursor.getInt(offset + 11), // kongNum
            cursor.getShort(offset + 12) != 0 // diJian
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PaiData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPaiId(cursor.getInt(offset + 1));
        entity.setQyid(cursor.getInt(offset + 2));
        entity.setSum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDelayMin(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDelayMax(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setShouquan(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStartDelay(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setKongDelay(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNeiDelay(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPaiDelay(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setKongNum(cursor.getInt(offset + 11));
        entity.setDiJian(cursor.getShort(offset + 12) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PaiData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PaiData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PaiData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
