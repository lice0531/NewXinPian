package android_serialport_api.xingbang.db.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android_serialport_api.xingbang.db.UserMain;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UserMain".
*/
public class UserMainDao extends AbstractDao<UserMain, Long> {

    public static final String TABLENAME = "UserMain";

    /**
     * Properties of entity UserMain.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Uname = new Property(1, String.class, "uname", false, "uname");
        public final static Property Upassword = new Property(2, String.class, "upassword", false, "upassword");
        public final static Property Isface = new Property(3, String.class, "isface", false, "isface");
        public final static Property Facepath = new Property(4, String.class, "facepath", false, "facepath");
        public final static Property UCid = new Property(5, String.class, "uCid", false, "uCid");
        public final static Property UCName = new Property(6, String.class, "uCName", false, "uCName");
        public final static Property UFName = new Property(7, String.class, "uFName", false, "uFName");
        public final static Property UIDCard = new Property(8, String.class, "uIDCard", false, "uIDCard");
        public final static Property UProvince = new Property(9, String.class, "uProvince", false, "uProvince");
        public final static Property UMarket = new Property(10, String.class, "uMarket", false, "uMarket");
        public final static Property UCounty = new Property(11, String.class, "uCounty", false, "uCounty");
    }


    public UserMainDao(DaoConfig config) {
        super(config);
    }
    
    public UserMainDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UserMain\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"uname\" TEXT," + // 1: uname
                "\"upassword\" TEXT," + // 2: upassword
                "\"isface\" TEXT," + // 3: isface
                "\"facepath\" TEXT," + // 4: facepath
                "\"uCid\" TEXT," + // 5: uCid
                "\"uCName\" TEXT," + // 6: uCName
                "\"uFName\" TEXT," + // 7: uFName
                "\"uIDCard\" TEXT," + // 8: uIDCard
                "\"uProvince\" TEXT," + // 9: uProvince
                "\"uMarket\" TEXT," + // 10: uMarket
                "\"uCounty\" TEXT);"); // 11: uCounty
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UserMain\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserMain entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uname = entity.getUname();
        if (uname != null) {
            stmt.bindString(2, uname);
        }
 
        String upassword = entity.getUpassword();
        if (upassword != null) {
            stmt.bindString(3, upassword);
        }
 
        String isface = entity.getIsface();
        if (isface != null) {
            stmt.bindString(4, isface);
        }
 
        String facepath = entity.getFacepath();
        if (facepath != null) {
            stmt.bindString(5, facepath);
        }
 
        String uCid = entity.getUCid();
        if (uCid != null) {
            stmt.bindString(6, uCid);
        }
 
        String uCName = entity.getUCName();
        if (uCName != null) {
            stmt.bindString(7, uCName);
        }
 
        String uFName = entity.getUFName();
        if (uFName != null) {
            stmt.bindString(8, uFName);
        }
 
        String uIDCard = entity.getUIDCard();
        if (uIDCard != null) {
            stmt.bindString(9, uIDCard);
        }
 
        String uProvince = entity.getUProvince();
        if (uProvince != null) {
            stmt.bindString(10, uProvince);
        }
 
        String uMarket = entity.getUMarket();
        if (uMarket != null) {
            stmt.bindString(11, uMarket);
        }
 
        String uCounty = entity.getUCounty();
        if (uCounty != null) {
            stmt.bindString(12, uCounty);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserMain entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uname = entity.getUname();
        if (uname != null) {
            stmt.bindString(2, uname);
        }
 
        String upassword = entity.getUpassword();
        if (upassword != null) {
            stmt.bindString(3, upassword);
        }
 
        String isface = entity.getIsface();
        if (isface != null) {
            stmt.bindString(4, isface);
        }
 
        String facepath = entity.getFacepath();
        if (facepath != null) {
            stmt.bindString(5, facepath);
        }
 
        String uCid = entity.getUCid();
        if (uCid != null) {
            stmt.bindString(6, uCid);
        }
 
        String uCName = entity.getUCName();
        if (uCName != null) {
            stmt.bindString(7, uCName);
        }
 
        String uFName = entity.getUFName();
        if (uFName != null) {
            stmt.bindString(8, uFName);
        }
 
        String uIDCard = entity.getUIDCard();
        if (uIDCard != null) {
            stmt.bindString(9, uIDCard);
        }
 
        String uProvince = entity.getUProvince();
        if (uProvince != null) {
            stmt.bindString(10, uProvince);
        }
 
        String uMarket = entity.getUMarket();
        if (uMarket != null) {
            stmt.bindString(11, uMarket);
        }
 
        String uCounty = entity.getUCounty();
        if (uCounty != null) {
            stmt.bindString(12, uCounty);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserMain readEntity(Cursor cursor, int offset) {
        UserMain entity = new UserMain( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // upassword
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // isface
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // facepath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // uCid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // uCName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // uFName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // uIDCard
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // uProvince
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // uMarket
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // uCounty
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserMain entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsface(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFacepath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUCid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUCName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUFName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUIDCard(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUProvince(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUMarket(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUCounty(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserMain entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserMain entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserMain entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
