package android_serialport_api.xingbang.db.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android_serialport_api.xingbang.db.DenatorHis_Main;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "denatorHis_Main".
*/
public class DenatorHis_MainDao extends AbstractDao<DenatorHis_Main, Long> {

    public static final String TABLENAME = "denatorHis_Main";

    /**
     * Properties of entity DenatorHis_Main.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Blastdate = new Property(1, String.class, "blastdate", false, "blastdate");
        public final static Property UploadStatus = new Property(2, String.class, "uploadStatus", false, "uploadStatus");
        public final static Property Longitude = new Property(3, String.class, "longitude", false, "longitude");
        public final static Property Latitude = new Property(4, String.class, "latitude", false, "latitude");
        public final static Property Userid = new Property(5, String.class, "userid", false, "userid");
        public final static Property Equ_no = new Property(6, String.class, "equ_no", false, "equ_no");
        public final static Property SerialNo = new Property(7, int.class, "serialNo", false, "serialNo");
        public final static Property Pro_xmbh = new Property(8, String.class, "pro_xmbh", false, "pro_xmbh");
        public final static Property Pro_htid = new Property(9, String.class, "pro_htid", false, "pro_htid");
        public final static Property Pro_dwdm = new Property(10, String.class, "pro_dwdm", false, "pro_dwdm");
        public final static Property Remark = new Property(11, String.class, "remark", false, "remark");
        public final static Property Log = new Property(12, String.class, "log", false, "log");
    }


    public DenatorHis_MainDao(DaoConfig config) {
        super(config);
    }
    
    public DenatorHis_MainDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"denatorHis_Main\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"blastdate\" TEXT," + // 1: blastdate
                "\"uploadStatus\" TEXT," + // 2: uploadStatus
                "\"longitude\" TEXT," + // 3: longitude
                "\"latitude\" TEXT," + // 4: latitude
                "\"userid\" TEXT," + // 5: userid
                "\"equ_no\" TEXT," + // 6: equ_no
                "\"serialNo\" INTEGER NOT NULL ," + // 7: serialNo
                "\"pro_xmbh\" TEXT," + // 8: pro_xmbh
                "\"pro_htid\" TEXT," + // 9: pro_htid
                "\"pro_dwdm\" TEXT," + // 10: pro_dwdm
                "\"remark\" TEXT," + // 11: remark
                "\"log\" TEXT);"); // 12: log
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"denatorHis_Main\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DenatorHis_Main entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String blastdate = entity.getBlastdate();
        if (blastdate != null) {
            stmt.bindString(2, blastdate);
        }
 
        String uploadStatus = entity.getUploadStatus();
        if (uploadStatus != null) {
            stmt.bindString(3, uploadStatus);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(4, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(5, latitude);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(6, userid);
        }
 
        String equ_no = entity.getEqu_no();
        if (equ_no != null) {
            stmt.bindString(7, equ_no);
        }
        stmt.bindLong(8, entity.getSerialNo());
 
        String pro_xmbh = entity.getPro_xmbh();
        if (pro_xmbh != null) {
            stmt.bindString(9, pro_xmbh);
        }
 
        String pro_htid = entity.getPro_htid();
        if (pro_htid != null) {
            stmt.bindString(10, pro_htid);
        }
 
        String pro_dwdm = entity.getPro_dwdm();
        if (pro_dwdm != null) {
            stmt.bindString(11, pro_dwdm);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(12, remark);
        }
 
        String log = entity.getLog();
        if (log != null) {
            stmt.bindString(13, log);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DenatorHis_Main entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String blastdate = entity.getBlastdate();
        if (blastdate != null) {
            stmt.bindString(2, blastdate);
        }
 
        String uploadStatus = entity.getUploadStatus();
        if (uploadStatus != null) {
            stmt.bindString(3, uploadStatus);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(4, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(5, latitude);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(6, userid);
        }
 
        String equ_no = entity.getEqu_no();
        if (equ_no != null) {
            stmt.bindString(7, equ_no);
        }
        stmt.bindLong(8, entity.getSerialNo());
 
        String pro_xmbh = entity.getPro_xmbh();
        if (pro_xmbh != null) {
            stmt.bindString(9, pro_xmbh);
        }
 
        String pro_htid = entity.getPro_htid();
        if (pro_htid != null) {
            stmt.bindString(10, pro_htid);
        }
 
        String pro_dwdm = entity.getPro_dwdm();
        if (pro_dwdm != null) {
            stmt.bindString(11, pro_dwdm);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(12, remark);
        }
 
        String log = entity.getLog();
        if (log != null) {
            stmt.bindString(13, log);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DenatorHis_Main readEntity(Cursor cursor, int offset) {
        DenatorHis_Main entity = new DenatorHis_Main( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // blastdate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uploadStatus
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // longitude
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // latitude
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // equ_no
            cursor.getInt(offset + 7), // serialNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pro_xmbh
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pro_htid
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pro_dwdm
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // remark
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // log
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DenatorHis_Main entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBlastdate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUploadStatus(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLongitude(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLatitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEqu_no(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSerialNo(cursor.getInt(offset + 7));
        entity.setPro_xmbh(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPro_htid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPro_dwdm(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRemark(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLog(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DenatorHis_Main entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DenatorHis_Main entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DenatorHis_Main entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
