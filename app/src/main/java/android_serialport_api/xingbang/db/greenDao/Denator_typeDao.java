package android_serialport_api.xingbang.db.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android_serialport_api.xingbang.db.Denator_type;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "denator_type".
*/
public class Denator_typeDao extends AbstractDao<Denator_type, Long> {

    public static final String TABLENAME = "denator_type";

    /**
     * Properties of entity Denator_type.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property DeTypeName = new Property(1, String.class, "deTypeName", false, "deTypeName");
        public final static Property DeTypeSecond = new Property(2, String.class, "deTypeSecond", false, "deTypeSecond");
        public final static Property IsSelected = new Property(3, String.class, "isSelected", false, "isSelected");
    }


    public Denator_typeDao(DaoConfig config) {
        super(config);
    }
    
    public Denator_typeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"denator_type\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"deTypeName\" TEXT," + // 1: deTypeName
                "\"deTypeSecond\" TEXT," + // 2: deTypeSecond
                "\"isSelected\" TEXT);"); // 3: isSelected
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"denator_type\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Denator_type entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deTypeName = entity.getDeTypeName();
        if (deTypeName != null) {
            stmt.bindString(2, deTypeName);
        }
 
        String deTypeSecond = entity.getDeTypeSecond();
        if (deTypeSecond != null) {
            stmt.bindString(3, deTypeSecond);
        }
 
        String isSelected = entity.getIsSelected();
        if (isSelected != null) {
            stmt.bindString(4, isSelected);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Denator_type entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deTypeName = entity.getDeTypeName();
        if (deTypeName != null) {
            stmt.bindString(2, deTypeName);
        }
 
        String deTypeSecond = entity.getDeTypeSecond();
        if (deTypeSecond != null) {
            stmt.bindString(3, deTypeSecond);
        }
 
        String isSelected = entity.getIsSelected();
        if (isSelected != null) {
            stmt.bindString(4, isSelected);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Denator_type readEntity(Cursor cursor, int offset) {
        Denator_type entity = new Denator_type( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deTypeName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deTypeSecond
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // isSelected
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Denator_type entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeTypeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeTypeSecond(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsSelected(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Denator_type entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Denator_type entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Denator_type entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
